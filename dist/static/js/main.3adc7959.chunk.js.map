{"version":3,"sources":["store/actions/index.js","App.js","serviceWorker.js","store/reducers/nasaReducer.js","store/reducers/errorReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["LOADING","GET_ERRORS","SEARCH_SUCCESS","setLoading","concat","type","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","value","handleSubmit","preventDefault","state","query","length","searchPhoto","link","_this2","_this$props","loading","errors","filteredImages","searchD","filter","x","links","href","includes","react_default","a","createElement","className","style","color","message","Form","onSubmit","FormGroup","Input","placeholder","onChange","Button","react_loader_spinner_default","height","width","map","i","console","log","data","Card","key","CardImg","top","src","alt","CardBody","CardTitle","title","CardSubtitle","date_created","CardText","secondary_creator","Component","connect","nasa","dispatch","search","axios","get","then","res","payload","collection","items","idx","catch","err","Boolean","window","location","hostname","match","initialState","combineReducers","arguments","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","__REDUX_DEVTOOLS_EXTENSION__","AppWithRouter","withRouter","app","es","BrowserRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3adc7959.chunk.js","sourcesContent":["import axios from \"axios\";\nexport const LOADING = \"POST_LOADING\";\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const SEARCH_SUCCESS = \"SEARCH_SUCCESS\";\n\nconst KEY = `i6V4acPzUYieJPgrWGxvgc3ay1BYVF757kNh4R0Y`;\nconst SKEY = `i6V4acPzUYieJPgrWGxvgc3ay1BYVF757kNh4R0Y`;\nconst URL = `https://api.nasa.gov/planetary/apod?api_key=${KEY}`;\nconst SEARCH = `https://images-api.nasa.gov/search?`;\n\nexport const searchPhoto = query => dispatch => {\n  const search = !query ? \"mars\" : query;\n  dispatch(setLoading());\n  axios\n    .get(`${SEARCH}q=${search}`)\n    .then(res =>\n      dispatch({\n        type: SEARCH_SUCCESS,\n        payload: res.data.collection.items.filter((x, idx) => idx < 20)\n      })\n    )\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err\n      })\n    );\n};\n\nexport const setLoading = () => {\n  return {\n    type: LOADING\n  };\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport Loader from \"react-loader-spinner\";\nimport { searchPhoto } from \"./store/actions\";\n\nimport {\n  Form,\n  FormGroup,\n  Input,\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button\n} from \"reactstrap\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: \"\",\n      link: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.searchPhoto();\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (!this.state.query.length) return;\n    this.props.searchPhoto(this.state.query);\n    this.setState({ query: \"\" });\n  };\n\n  render() {\n    const { loading, errors, searchD } = this.props;\n    let filteredImages = searchD.filter(x => x.links[0].href.includes(\".jpg\"));\n    return (\n      <div className=\"App\">\n        {errors && <h1 style={{ color: \"red\" }}>{errors.message}</h1>}\n        <div className=\"wrapper\">\n          <h1 className=\"nasa-title\">NASA Photo of the day </h1>\n          <Form onSubmit={e => this.handleSubmit(e)}>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"query\"\n                placeholder=\"search here..\"\n                value={this.state.query}\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n            <Button type=\"submit\">search</Button>\n          </Form>\n        </div>\n        {loading && (\n          <Loader type=\"Ball-Triangle\" color=\"#00BFFF\" height=\"90\" width=\"60\" />\n        )}\n        <div className=\"container\">\n          {filteredImages.map((x, i) => {\n            console.log(x.data[0]);\n            return (\n              <Card key={i}>\n                <CardImg\n                  top\n                  width=\"100%\"\n                  src={x.links[0].href}\n                  alt=\"Card image cap\"\n                />\n                <CardBody>\n                  <CardTitle>{x.data[0].title}</CardTitle>\n                  <CardSubtitle>{x.data[0].date_created}</CardSubtitle>\n                  <CardText>{x.data[0].secondary_creator}</CardText>\n                </CardBody>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  loading: state.nasa.loading,\n  searchD: state.nasa.searchD\n});\n\nexport default connect(\n  mapStateToProps,\n  { searchPhoto }\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { RECIEVED_NEW_IMAGE, SEARCH_SUCCESS, LOADING } from \"../actions\";\n\nconst initialState = {\n  loading: false,\n  searchD: []\n};\nexport default function nasaReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n\n    case SEARCH_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        searchD: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n","import { GET_ERRORS } from \"../actions\";\nconst initialState = {};\nexport default function errorReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport nasaReducer from \"./nasaReducer\";\nimport errorReducer from \"./errorReducer\";\n\nexport default combineReducers({\n  nasa: nasaReducer,\n  errors: errorReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/\";\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, withRouter } from \"react-router-dom\";\n\nconst AppWithRouter = withRouter(App);\nconst app = (\n  <Provider store={store}>\n    <Router>\n      <AppWithRouter />\n    </Router>\n  </Provider>\n);\nReactDOM.render(app, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}